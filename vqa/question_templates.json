{
    "generic":{
        "localization":{
            "text": [
                "Locate the <o>.",
                "Give me the bounding [box] of <o>."
            ],
            "params":[
                "<o>",
                "box"
            ],
            "end_filter":"locate",
            "constraint":[]
        },
        "counting": {
            "text":[
                "How many <o> are persent?", 
                "Give me the number of <o>."
            ],
            "params":[
                "<o>"
            ],
            "end_filter":"count",
            "constraint":[]
        },
        "count_equal_binary":{
            "text":[
                "Are there equal number of the following things: <o1>,<o2>?",
                "Do we have the same number of <o1> and <o2>?"
            ],
            "params":[
                "<o1>","<o2>"
            ],
            "end_filter":"count_equal",
            "constraint":[]
        },
        "count_more_binary":{
            "text":[
                "Are there more <o1> than <o2>",
                "Are there less <o2> than <o1>"
            ],
            "params":[
                "<o1>","<o2>"
            ],
            "end_filter":"count_more",
            "constraint":[]
        },
        "identify_property":{
            "text":[
                "What is the <p> for <o>?",
                "What <p> does <o> have"
            ],
            "param":[
                "<p>","<o>","<ans>"
            ],
            "end_filter":"extract_p",
            "constraint":["unique"]
        }
    },
    "dynamic":{
        "identify_stationary":{
            "text":[
                "Is the <o> stationary?",
                "Is the <o> parked?",
                "Is the <o> not moving?"
            ],
            "param":[
                "o"
            ],
            "end_filter":"is_stationary",
            "constraint":["unique"]
        }
    },
    "safety":{
        "feasibility":{
            "text":[
                "Can <o> <a> at this moment?",
                "Is it safe for <o> to <a> at this moment?"
            ],
            "param":[
                "<o>", "<a>"
            ],
            "end_filter":"situational",
            "constraint": ["unique"]
        },
        "regulatory":{
            "text":[
                "Should <o> <a> at this moment?",
                "Does <o> <a> break the traffic rule?",
                "Can <o> <a> without breaking the traffic rule?",
                "Is <o> doing <a> compliant with the traffic rule?"
            ],
            "param":[
                "<o>","<a>"
            ],
            "end_filter":"situational_rule",
            "constraint":["unique"]
        },
        "counterfactual_unary":{
            "text":[
                "Will <e> happen if <o1> <a1>?",
                "If <o> <a>, is <e> expected?"
            ],
            "param":[
                "<o>","<a>"
            ],
            "end_filter":"inference",
            "constraint":["unique"]
        },
        "counterfactual_binary":{
            "text":[
                "If <o1> <a1> and <o2> <a2>, will <e> happens?",
                "Is <e> expected should <o1> <a1> and <o2> <a2>"
            ],
            "param":[
                "<o1>","<a1>, <o2>, <a2>"
            ],
            "constraint":["unique"]
        },
        "counterfactual_unary_choice":{
            "text":[
                "What will happen if <o1> <a1>?"
            ],
            "param":[
                "<o>","<a>","<ans>"
            ],
            "constraint":["unique"]
        },
        "counterfactual_binary_choice":{
            "text":[
                "If <o1> <a1> and <o2> <a2>, what will happens?",
                "What's expected should <o1> <a1> and <o2> <a2>"
            ],
            "param":[
                "<o1>","<a1>", "<o2>", "<a2>","<ans>"
            ],
            "constraint":["unique"]
        }
    }
   
}