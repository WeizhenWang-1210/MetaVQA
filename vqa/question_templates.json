{
    "generic":{
        "localization":{
            "text": [
                "Locate the <o>.",
                "Give me the bounding [box] of <o>."
            ],
            "params":[
                "<o>",
                "box"
            ],
            "end_filter":"locate",
            "constraint":[]
        },
        "counting": {
            "text":[
                "How many <o> are <a>?", 
                "Give me the number of <o> that are <a>"
            ],
            "params":[
                "<o>","<a>"
            ],
            "end_filter":"count",
            "constraint":[]
        },
        "count_equal_binary":{
            "text":[
                "Are there equal number of the following things: <o1>,<o2>?",
                "Do we have the same number of <o1> and <o2>?"
            ],
            "params":[
                "<o1>","<o2>"
            ],
            "end_filter":"count_equal",
            "constraint":[]
        },
        "count_more_binary":{
            "text":[
                "Are there more <o1> than <o2>",
                "Are there less <o2> than <o1>"
            ],
            "params":[
                "<o1>","<o2>"
            ],
            "end_filter":"count_more",
            "constraint":[]
        },
        "identify_property":{
            "text":[
                "What is the <p> for <o>?",
                "What <p> does <o> have"
            ],
            "param":[
                "<p>","<o>","<ans>"
            ],
            "end_filter":"extract_p",
            "constraint":["unique"]
        }
    },
    "dynamic":{
        "identify_stationary":{
            "text":[
                "Is the <o> stationary?",
                "Is the <o> parked?",
                "Is the <o> not moving?"
            ],
            "param":[
                "o"
            ],
            "end_filter":"is_stationary",
            "constraint":["unique"]
        }
    },
    "safety":{
        "feasibility":{
            "text":[
                "Can <o> <a> at this moment?",
                "Is it safe for <o> to <a> at this moment?"
            ],
            "param":[
                "<o>", "<a>"
            ],
            "end_filter":"situational",
            "constraint": ["unique"]
        },
        "regulatory":{
            "text":[
                "Should <o> <a> at this moment?",
                "Does <o> <a> break the traffic rule?",
                "Can <o> <a> without breaking the traffic rule?",
                "Is <o> doing <a> compliant with the traffic rule?"
            ],
            "param":[
                "<o>","<a>"
            ],
            "end_filter":"situational_rule",
            "constraint":["unique"]
        },
        "counterfactual_unary":{
            "text":[
                "Will <e> happen if <o1> <a1>?",
                "If <o> <a>, is <e> expected?"
            ],
            "param":[
                "<o>","<a>"
            ],
            "end_filter":"inference",
            "constraint":["unique"]
        },
        "counterfactual_binary":{
            "text":[
                "If <o1> <a1> and <o2> <a2>, will <e> happens?",
                "Is <e> expected should <o1> <a1> and <o2> <a2>"
            ],
            "param":[
                "<o1>","<a1>, <o2>, <a2>"
            ],
            "constraint":["unique"]
        },
        "counterfactual_unary_choice":{
            "text":[
                "What will happen if <o1> <a1>?"
            ],
            "param":[
                "<o>","<a>","<ans>"
            ],
            "constraint":["unique"]
        },
        "counterfactual_binary_choice":{
            "text":[
                "If <o1> <a1> and <o2> <a2>, what will happens?",
                "What's expected should <o1> <a1> and <o2> <a2>"
            ],
            "param":[
                "<o1>","<a1>", "<o2>", "<a2>","<ans>"
            ],
            "constraint":["unique"]
        }
    }
   
}


<o> car    [[type = car, color = None, pos = None]]
<o> blue car [[type = car, color = blue, pos = None]]
<o> blue car on the right of a green car [[type = car, color=  gree, pos = None], [type = car, color =blue, pos = right]]
<o> parked blue car to the right or the green car that just passed by us

<o> blue c arin front of us

<a> 


 #TODO
dictionary 
<sportscar> := []
    ================
    |             |
  ego  --- v1     |
     \       \    |
      \       \   |
       v2  ---- v3
 
<o> := <t> | <P> <o> | <p> <o> <pos> <o>| <action> <o> <dest> | <o> that <action>
<dest> := <dir> <o>


<action> := park | accelerate | decelerate | 
<t> : = t|car | pedestrian | policecar  | firefightertruct .....


car <o>                        blue car <o>                                 blue car on the right of a gree car  <o>
     |                                  / \                                                                      /\    \      \
    <t>                             <p>    <o>                                                                  <p> <o> <pos> <o> ---------------|                          
     |                               |       |                                                                  blue  |   to the right of       <p> <o>
    car                              blue   <t>                                                                       <t>                       green car
                                            |                                                                         car
                                            car                                                          
                                            
                                               
parked blue car to the right of the green car that just passed by us <o>
                                                                    / | \
                                                              <action> <o>  <dest>
                                                                |    / \     |                  
                                                               park <p><o>  
                                                                     |  |    |   \
                                                                   blue car <dir>  <o>
                                                                             |       \       
                                                                       to the right of  <p>



the process is to generate a parse tree. 






blue car that turned right?



#TODO : Action injection + recording 
#TODO : Dictionary mapping codename to natural English
#TODO:  



How to instantiate all possible questions:
    go through the dictionary, extract all existing terminal symbols. When instantiating questions, only use terminal symbols that's 
    present in the annotation,
    Use some sort of caching mechanism, so that once it's determined that certain kinds of entities doesn't exist in the scenario,
            key: paths to some entities
            value: unsat.
    Utilize the full potential of context-free-grammar to build trees, and arbitrarily instantiate the tree with terminal tokens. Pass
    this tree to the querier to see if there're some entities that satisfy this description. If so, instantiate the question. If not, 
    remember this cfg with unsat property. 





equal number of blue car and red pedestrian 

blue car---------->     equal ?  ------> True/False
red pedestrian --------> 










